// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String
  email       String   @unique
  profilePic  String
  isAdmin     Boolean  @default(false)
  isActive    Boolean  @default(true)
  clerkUserId String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Property     Property[]
  Query        Query[]
  Subscription Subscription[]
}

model Property {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  status           String
  title            String
  propertyType     String
  propertyDetails  String
  description      String
  price            Float
  leastPrice       Float
  currency         String
  country          String
  county           String
  district         String
  locality         String
  nearbyTown       String
  location         String
  bedrooms         Int
  bathrooms        Int
  landSize         Float
  landUnits        String
  plinthArea       Int
  appliances       String[]
  images           String[]
  agentName        String
  email            String
  officeLine       String
  whatsappNumber   String
  address          String
  postalCode       String
  showAgentContact Boolean  @default(false)
  isActive         Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Query Query[]
}

model Query {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name       String
  email      String
  phone      String
  amount     Float
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Json
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// plan   Plan
// planId String
// startDate DateTime @default(now())
// endDate   DateTime
// isActive  Boolean  @default(true)
