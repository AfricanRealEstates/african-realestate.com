// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

enum UserRole {
  USER
  AGENT
  ADMIN
  SUPPORT
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  permissions   String[]
  password      String?
  isVerified    Boolean        @default(false)
  isActive      Boolean        @default(true)
  token         Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  Property      Property[]
  Query         Query[]
  Subscription  Subscription[]
  Order         Order[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                     String   @id @default(uuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  status                 String
  title                  String
  propertyType           String
  propertyDetails        String
  description            String
  price                  Float
  leastPrice             Float
  currency               String
  country                String
  county                 String
  district               String
  locality               String
  nearbyTown             String
  location               String
  bedrooms               Int
  bathrooms              Int
  landSize               Float
  landUnits              String
  plinthArea             Int
  appliances             String[]
  images                 String[]
  agentName              String
  email                  String
  officeLine             String
  whatsappNumber         String
  address                String
  postalCode             String
  isAvailableForPurchase Boolean  @default(true)
  showAgentContact       Boolean  @default(false)
  isActive               Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Query Query[]
  Order Order[]
}

model Query {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name       String
  email      String
  phone      String
  amount     Float
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Json
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Restrict)
}

model Post {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  description   String?
  coverImageUrl String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// plan   Plan
// planId String
// startDate DateTime @default(now())
// endDate   DateTime
// isActive  Boolean  @default(true)
