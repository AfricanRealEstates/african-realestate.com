generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  AGENT
  AGENCY
  ADMIN
  SUPPORT
}

model User {
  id               String          @id @default(dbgenerated("concat('user_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name             String?
  username         String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole        @default(USER)
  permissions      String[]
  password         String?
  isVerified       Boolean         @default(false)
  isActive         Boolean         @default(true)
  token            Int?
  agentName        String?
  agentEmail       String?
  agentLocation    String?
  officeLine       String?
  whatsappNumber   String?
  phoneNumber      String?
  address          String?
  postalCode       String?
  profilePhoto     String?
  coverPhoto       String?
  bio              String?
  xLink            String?
  tiktokLink       String?
  facebookLink     String?
  youtubeLink      String?
  linkedinLink     String?
  instagramLink    String?
  showAgentContact Boolean?        @default(false) // moved from property
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isPremium        Boolean         @default(false)
  accounts         Account[]
  sessions         Session[]
  properties       Property[]
  queries          Query[]
  subscriptions    Subscription[]
  orders           Order[]
  likes            Like[]
  favoriteIds      String[]
  ratings          Rating[]
  saved            SavedProperty[]
  comments         Comment[]
  followedBy       Follows[]       @relation("following")
  following        Follows[]       @relation("follower")
  upvotes          Upvote[]
  notifications    Notification[]
  viewedProperties PropertyView[]
  likedPosts       BlogPost[]      @relation("UserLikedPosts")
  discounts        Discount[]      @relation("UserDiscounts")

  @@map("users")
}

model Account {
  id                String  @id @default(dbgenerated("concat('account_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("concat('session_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model propertyDetail {
  id   String @id @default(dbgenerated("concat('propertyDetail_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name String @unique
}

model Property {
  id                     String   @id @default(dbgenerated("concat('property_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  propertyNumber         Int      @unique
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  slug                   String?  @unique
  status                 String
  title                  String
  propertyType           String
  propertyDetails        String
  description            String
  price                  Float
  leastPrice             Float?
  currency               String
  country                String
  county                 String
  locality               String
  nearbyTown             String
  district               String?
  location               String?
  bedrooms               Int?
  bathrooms              Int?
  yearsLeft              Int?
  landSize               Float?
  landUnits              String?
  plinthArea             Int?
  videoLink              String?
  serviceCharge          Int?
  parkings               String?
  tenure                 String?
  appliances             String[]
  surroundingFeatures    String[]
  images                 String[]
  coverPhotos            String[]
  isAvailableForPurchase Boolean  @default(true)
  isActive               Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  queries       Query[]
  orders        Order[]
  likes         Like[]
  ratings       Rating[]
  savedBy       SavedProperty[]
  comments      Comment[]
  upvotes       Upvote[]
  notifications Notification[]
  views         PropertyView[]

  @@map("properties")
}

model PropertyNumberSequence {
  id  Int @id @default(1)
  seq Int @default(6999)

  @@map("property_number_seq")
}

model PropertyView {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  deviceType String
  browser    String
  os         String
  country    String?
  city       String?
  viewedAt   DateTime @default(now())

  @@index([propertyId])
  @@index([userId])
}

model Discount {
  id             String   @id @default(dbgenerated("concat('discount_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  code           String   @unique
  percentage     Int
  startDate      DateTime
  expirationDate DateTime
  users          User[]   @relation("UserDiscounts")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("discounts")
}

model Query {
  id         String   @id @default(dbgenerated("concat('query_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name       String
  email      String
  phone      String
  amount     Float
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("queries")
}

model Subscription {
  id        String   @id @default(dbgenerated("concat('subscription_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Json
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Order {
  id        String   @id @default(dbgenerated("concat('order_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Restrict)

  @@map("orders")
}

model Blog {
  id         Int      @id @default(autoincrement())
  slug       String   @unique
  title      String
  category   String
  view_count Int      @default(1)
  updatedAt  DateTime @default(now())
}

model BlogPost {
  id      String @id @default(cuid())
  slug    String @unique
  likes   Int    @default(0)
  likedBy User[] @relation("UserLikedPosts")
}

model Subscriber {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  is_subscribed Boolean @default(true)
}

model Rating {
  id         Int      @id @default(autoincrement())
  ratings    Decimal
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// plan   Plan
// planId String
// startDate DateTime @default(now())
// endDate   DateTime
// isActive  Boolean  @default(true)

model Like {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@index([userId])
}

model SavedProperty {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@index([userId])
}

model Upvote {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id             String   @id @default(cuid())
  profilePicture String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  body           String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId     String
  userId         String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@index([propertyId])
  // @@index([userId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id             String             @id @default(cuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  body           String
  profilePicture String
  propertyId     String
  commentId      String?
  property       Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum Status {
  PENDING
  ACTIVE
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
  ACTIVATED
  REJECTED
}
