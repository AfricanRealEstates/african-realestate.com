// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  AGENT
  ADMIN
  SUPPORT
}

model User {
  id               String         @id @default(dbgenerated("concat('user_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole       @default(USER)
  permissions      String[]
  password         String?
  isVerified       Boolean        @default(false)
  isActive         Boolean        @default(true)
  token            Int?
  agentName        String? // moved from property
  agentEmail       String?
  officeLine       String?
  whatsappNumber   String?
  address          String?
  postalCode       String?
  profilePhoto     String?
  coverPhoto       String?
  bio              String?
  showAgentContact Boolean?       @default(false) // moved from property
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  sessions         Session[]
  properties       Property[]
  queries          Query[]
  subscriptions    Subscription[]
  orders           Order[]

  @@map("users")
}

model Account {
  id                String  @id @default(dbgenerated("concat('account_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("concat('session_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Property {
  id                     String   @id @default(dbgenerated("concat('property_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  slug                   String?  @unique
  status                 String
  title                  String
  propertyType           String
  propertyDetails        String
  description            String
  price                  Float
  leastPrice             Float
  currency               String
  country                String
  county                 String
  locality               String
  nearbyTown             String
  district               String?
  location               String?
  bedrooms               Int?
  bathrooms              Int?
  landSize               Float?
  landUnits              String?
  plinthArea             Int
  videoLink              String?
  serviceCharge          String?
  parkings               String?
  tenure                 String?
  appliances             String[]
  images                 String[]
  coverPhotos            String[]
  // agentName              String // move to user
  // email                  String
  // officeLine             String
  // whatsappNumber         String
  // address                String
  // postalCode             String
  // showAgentContact       Boolean  @default(false) // move to user
  isAvailableForPurchase Boolean  @default(true)
  isActive               Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  queries Query[]
  orders  Order[]

  @@map("properties")
}

model Query {
  id         String   @id @default(dbgenerated("concat('query_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name       String
  email      String
  phone      String
  amount     Float
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("queries")
}

model Subscription {
  id        String   @id @default(dbgenerated("concat('subscription_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Json
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Order {
  id        String   @id @default(dbgenerated("concat('order_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Restrict)

  @@map("orders")
}

model Post {
  id            String   @id @default(dbgenerated("concat('post_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  title         String
  slug          String   @unique
  description   String?
  coverImageUrl String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("posts")
}

// plan   Plan
// planId String
// startDate DateTime @default(now())
// endDate   DateTime
// isActive  Boolean  @default(true)
